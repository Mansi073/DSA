class Solution {
public:
    int sumOfUnique(vector<int>& nums) {
        unordered_map<int,int>umap;
        int k=0;
        for(int i=0;i<nums.size();i++)
        umap[nums[i]]++;
        for(int i=0;i<nums.size();i++)
        {
            int key=nums[i];
            auto temp=umap.find(key);
            int val=temp->second;
            if(val<=1)
             k=k+nums[i];
        }
        return k;

    }
};
class Solution {
public:
    int countDistinctIntegers(vector<int>& nums) {
        unordered_set<int>numSet;
        for(int i=0;i<nums.size();i++)
        numSet.insert(nums[i]);
        for (const int num : nums)
      numSet.insert(reversed(num));

    return numSet.size();
  }

 private:
  int reversed(int num) {
    int ans = 0;
    while (num > 0) {
      ans = ans * 10 + num % 10;
      num /= 10;
    }
    return ans;
  }
};
class Solution {
public:
    bool isNodePresent(ListNode *head, ListNode *node) {
        while (head != NULL) 
        {
            if (head == node)
            {
                return true;
            }
            head = head->next;
        }
        return false;
    }
    ListNode *getIntersectionNode(ListNode *head1, ListNode *head2) {
        while (head1 != NULL) {
            if (isNodePresent(head2, head1)) {
                return head1;
            }
            head1 = head1->next;
        }
        return NULL;
    }
};
