#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

void move(int d, string f, string t) {
    cout << "Moving ring " << d << " from " << f << " to " << t << endl;
}

void hanoi(int n, string a, string b, string c) {
    // Move n disks from a to c via b

    if(n > 0) {
        hanoi(n - 1, a, c, b);
        move(n, a, c);
        hanoi(n - 1, b, a, c);
    }
}

int main() {
    int n = 0;

    cin >> n;

    hanoi(n, "A", "C", "B");

    return 0;
}
#include <iostream>
using namespace std;

struct Node{
	int data;
	Node *next;
};

Node* createNode(int val){
	Node *temp = new Node;
	temp->data = val;
	return temp;
}

//complete the functions

class Queue{
	Node *head;
	Node *tail;
	int s;

	public:
	//constructor is called whenever an object of the class is declared
	Queue(){
		s=0;
		head=NULL;
		tail=NULL;
	}

	//push the value at the back
	void push(int val){
	 Node *temp = createNode(val);
        if (head == NULL)
        {
            head = temp;
            tail = temp;
        }
        else
        {
            tail->next = temp;
            tail = temp;
        }
        s++;

	}

	int front(){
		  return head->data;

        return 0;
	}

	void pop(){
		Node *temp = head;
        head = head->next;
        delete temp;
        s--;
	}

	int size(){
		return s;
	}

	bool isEmpty(){
		 if (s == 0)
        {
            return true;
        }
        else
        {
            return false;
        }
	}
};

int main() {
	Queue q; //constructor is called on this line
	q.push(4);
	cout<<"front: "<<q.front()<<"\n";
	q.pop();
	cout<<"size: "<<q.size()<<"\n";
	cout<<"empty: "<<q.isEmpty()<<"\n";

	q.push(5);
	q.push(3);
	cout<<"front: "<<q.front()<<"\n";
	q.pop();
	cout<<"size: "<<q.size()<<"\n";
	cout<<"empty: "<<q.isEmpty()<<"\n";

	cout<<"front: "<<q.front()<<"\n";
	q.pop();
	cout<<"size: "<<q.size()<<"\n";
	cout<<"empty: "<<q.isEmpty()<<"\n";
	return 0;
}
